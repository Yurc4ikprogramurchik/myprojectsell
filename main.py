from telebot import TeleBot, types
from database import init_db, get_connection
from datetime import datetime
import sqlite3

TOKEN = '7612094054:AAFT1_6qYhRnZql3Nw-2u2H4K-P7m9C6pIQ'
ADMIN_ID = 7371632307
bot = TeleBot(TOKEN)

GOOGLE_DOC_LINK = "https://docs.google.com/document/d/1Ztyvyp_CTCA6yJxNL58WBFzqZ-mIpyCLbX7UosvkVdk/edit?usp=sharing"

# üî¢ –¶–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã
account_prices = {
    1: 400,
    2: 2500,
    3: 800,
    4: 350,
    5: 700,
    6: 800,
    7: 900
}



@bot.message_handler(commands=['start'])
def start_command(message):
    conn = get_connection()
    cursor = conn.cursor()
    telegram_id = str(message.from_user.id)
    username = message.from_user.username or "Unknown"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (telegram_id, username, registered, balance) VALUES (?, ?, ?, ?)",
                       (telegram_id, username, now, 0))  # –î–æ–±–∞–≤–ª—è–µ–º balance –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        conn.commit()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"),
        types.KeyboardButton("üßæ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"),
        types.KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã"),
        types.KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    )

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Steam-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                     reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ @yurezogure.")

@bot.message_handler(func=lambda m: m.text == "‚ùì –í–æ–ø—Ä–æ—Å—ã")
def questions(message):
    bot.send_message(message.chat.id,
                     "1. –ö–∞–∫ –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?\n‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                     "2. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤?\n‚Äî –í Google –î–æ–∫—É–º–µ–Ω—Ç–µ: " + GOOGLE_DOC_LINK)

@bot.message_handler(func=lambda m: m.text == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def instruction(message):
    bot.send_message(message.chat.id,
                     "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª\n"
                     "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å (Steam)\n"
                     "3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä\n"
                     "4. –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")

@bot.message_handler(func=lambda m: m.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def show_shop(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üéÆ Steam", callback_data="service_steam"),
        types.InlineKeyboardButton("üîê –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="service_other")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def show_accounts(call):
    service = call.data.split("_")[1]
    if service == "steam":
        markup = types.InlineKeyboardMarkup(row_width=2)
        for i in range(1, 8):
            price = account_prices.get(i, 999)
            markup.add(types.InlineKeyboardButton(f"–ê–∫–∫–∞—É–Ω—Ç #{i} ({price}‚ÇΩ)", callback_data=f"buy_{i}_{price}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.send_message(call.message.chat.id,
                         f"üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:\n{GOOGLE_DOC_LINK}\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                         reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    show_shop(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy(call):
    acc_data = call.data.split("_")
    acc_number = int(acc_data[1])
    acc_price = int(acc_data[2])

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí∏ –ÆMoney", callback_data=f"paymethod_yoomoney_{acc_number}_{acc_price}"),
        types.InlineKeyboardButton("üí≥ QIWI", callback_data=f"paymethod_qiwi_{acc_number}_{acc_price}"),
        types.InlineKeyboardButton("üè¶ –°–±–µ—Ä", callback_data=f"paymethod_sber_{acc_number}_{acc_price}")
    )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"service_steam"))

    bot.send_message(call.message.chat.id,
                     f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç #{acc_number} –∑–∞ {acc_price}‚ÇΩ.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("paymethod_"))
def handle_paymethod(call):
    _, method, acc_number, acc_price = call.data.split("_")
    acc_number = int(acc_number)
    acc_price = int(acc_price)

    payment_info = {
        "yoomoney": "41001123456789",
        "qiwi": "+79001234567",
        "sber": "5469 3800 1234 5678"
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_{acc_number}_{acc_price}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"buy_{acc_number}_{acc_price}"))

    bot.send_message(call.message.chat.id,
                     f"üí∞ –°–ø–æ—Å–æ–±: *{method.capitalize()}*\n"
                     f"–°—É–º–º–∞: *{acc_price}‚ÇΩ*\n"
                     f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: `{payment_info[method]}`\n\n"
                     f"‚úîÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                     parse_mode="Markdown",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_payment(call):
    acc_number = int(call.data.split("_")[1])
    acc_price = int(call.data.split("_")[2])

    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT login, password, is_sold FROM accounts WHERE id = ?", (acc_number,))
    acc = cursor.fetchone()

    if not acc:
        bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if acc[2] == 1:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω.")
        return

    login, password, _ = acc
    cursor.execute("UPDATE accounts SET is_sold = 1 WHERE id = ?", (acc_number,))
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (str(call.from_user.id),))
    user_id = cursor.fetchone()[0]
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO orders (user_id, account_id, date, paid) VALUES (?, ?, ?, 1)",
                   (user_id, acc_number, now))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id,
                     f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                     f"–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ #{acc_number}:\n\n"
                     f"–õ–æ–≥–∏–Ω: `{login}`\n–ü–∞—Ä–æ–ª—å: `{password}`",
                     parse_mode="Markdown")

    bot.send_message(ADMIN_ID,
                     f"üöÄ –ü–æ–∫—É–ø–∫–∞ –æ—Ç @{call.from_user.username}\n"
                     f"–ê–∫–∫–∞—É–Ω—Ç #{acc_number} –∑–∞ {acc_price}‚ÇΩ")

@bot.message_handler(func=lambda m: m.text == "üßæ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
def my_orders(message):
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (str(message.from_user.id),))
    user = cursor.fetchone()
    if not user:
        bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏.")
        return

    user_id = user[0]
    cursor.execute(""" 
        SELECT a.id, a.login, a.password FROM accounts a
        JOIN orders o ON o.account_id = a.id
        WHERE o.user_id = ? AND a.is_sold = 1
    """, (user_id,))

    results = cursor.fetchall()
    conn.close()

    if not results:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
    else:
        msg = "üì¶ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n\n"
        for acc_id, login, password in results:
            msg += f"–ê–∫–∫–∞—É–Ω—Ç #{acc_id}:\n–õ–æ–≥–∏–Ω: `{login}`\n–ü–∞—Ä–æ–ª—å: `{password}`\n\n"
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")

if __name__ == '__main__':
    init_db()
   
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
